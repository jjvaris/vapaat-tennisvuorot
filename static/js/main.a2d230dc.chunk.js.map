{"version":3,"sources":["hallit/talintenniskeskus.js","hallit/meilahti.js","hallit/index.js","components/TimeRangePicker.js","App.js","serviceWorker.js","index.js"],"names":["getAvailableHours","date","a","today","format","subDays","originalUri","uri","encodeURIComponent","axios","get","response","html","data","contents","availableHours","$","find","map","_","e","text","name","link","addDays","getAllAvailableHours","Promise","all","tali","meilahti","HOURS","TimeRangePicker","onChange","from","to","React","useState","start","setStart","end","setEnd","useEffect","Flex","align","justify","w","Select","size","value","target","iconSize","p","style","textAlignLast","slice","filter","hour","key","Box","mx","urlParams","URLSearchParams","window","location","search","startUrlParam","endUrlParam","dateUrlParam","parseISO","App","Date","searchDate","setSearchDate","setTimeRange","places","setPlaces","fetchAvailableHours","history","pushState","handleTimeRangeChange","useCallback","range","maxWidth","padding","Heading","mb","selected","minDate","inline","length","place","href","rel","my","hours","parseInt","display","margin","border","borderWidth","renderHours","marginTop","Boolean","hostname","match","ReactDOM","render","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2d230dc.chunk.js","sourcesContent":["import axios from 'axios';\nimport $ from 'jquery';\nimport { format, subDays } from 'date-fns';\n\nconst getAvailableHours = async date => {\n  const today = format(subDays(date, 1), 'yyyy-MM-dd');\n  const originalUri = `https://varaukset.talintenniskeskus.fi/booking/booking-calendar?BookingCalForm%5Bp_laji%5D=1&BookingCalForm%5Bp_pvm%5D=${today}&BookingCalForm%5Bp_pvm_interval%5D=1&BookingCalForm%5Bp_pvm_custom%5D=Sunnuntai+08.03.2020`;\n  const uri = `https://api.allorigins.win/get?url=${encodeURIComponent(\n    originalUri\n  )}`;\n  const response = await axios.get(uri);\n  const html = response.data.contents;\n  const availableHours = $(html)\n    .find('a[class=time-link]')\n    .map((_, e) => $(e).text())\n    .get();\n  return { name: 'Talin Tenniskeskus', availableHours, link: originalUri };\n};\n\nexport default getAvailableHours;\n","import axios from 'axios';\nimport $ from 'jquery';\nimport { format, addDays } from 'date-fns';\n\nconst getAvailableHours = async date => {\n  const today = format(addDays(date, 1), 'yyyy-MM-dd');\n  const originalUri = `https://meilahti.slsystems.fi/booking/booking-calendar?BookingCalForm%5Bp_laji%5D=1&BookingCalForm%5Bp_pvm%5D=${today}&BookingCalForm%5Bp_pvm_interval%5D=-1&BookingCalForm%5Bp_pvm_custom%5D=Maanantai+09.03.2020`;\n  const uri = `https://api.allorigins.win/get?url=${encodeURIComponent(\n    originalUri\n  )}`;\n  const response = await axios.get(uri);\n  const html = response.data.contents;\n  const availableHours = $(html)\n    .find('a[class=time-link]')\n    .map((_, e) => $(e).text())\n    .get();\n  return {\n    name: 'Meilahden liikuntakeskus',\n    availableHours,\n    link: originalUri\n  };\n};\n\nexport default getAvailableHours;\n","import tali from './talintenniskeskus';\nimport meilahti from './meilahti';\n\nconst getAllAvailableHours = async date => {\n  return await Promise.all([tali(date), meilahti(date)]);\n};\n\nexport default getAllAvailableHours;\n","import React from 'react';\nimport { Flex, Select, Box } from '@chakra-ui/core';\n\nconst HOURS = [\n  '06:00',\n  '07:00',\n  '08:00',\n  '09:00',\n  '10:00',\n  '11:00',\n  '12:00',\n  '13:00',\n  '14:00',\n  '15:00',\n  '16:00',\n  '17:00',\n  '18:00',\n  '19:00',\n  '20:00',\n  '21:00',\n  '22:00'\n];\n\nconst TimeRangePicker = ({ onChange, from, to }) => {\n  const [start, setStart] = React.useState(from);\n  const [end, setEnd] = React.useState(to);\n\n  React.useEffect(() => {\n    onChange([start, end]);\n  }, [start, end, onChange]);\n\n  return (\n    <Flex align=\"center\" justify=\"center\" w=\"240px\">\n      <Select\n        size=\"sm\"\n        value={start}\n        onChange={e => setStart(e.target.value)}\n        iconSize=\"0\"\n        w=\"55px\"\n        p=\"0.1rem\"\n        style={{ textAlignLast: 'center' }}\n      >\n        {HOURS.slice(0, -1)\n          .filter(hour => hour < end)\n          .map(hour => (\n            <option value={hour} key={hour}>\n              {hour}\n            </option>\n          ))}\n      </Select>\n      <Box mx=\"5px\">-</Box>\n      <Select\n        size=\"sm\"\n        value={end}\n        onChange={e => setEnd(e.target.value)}\n        iconSize=\"0\"\n        w=\"55px\"\n        p=\"0.1rem\"\n        style={{ textAlignLast: 'center' }}\n      >\n        {HOURS.slice(1)\n          .filter(hour => hour > start)\n          .map(hour => (\n            <option value={hour} key={hour}>\n              {hour}\n            </option>\n          ))}\n      </Select>\n    </Flex>\n  );\n};\n\nexport default TimeRangePicker;\n","import 'react-datepicker/dist/react-datepicker.css';\nimport React from 'react';\nimport getAllAvailableHours from './hallit';\nimport { format, parseISO } from 'date-fns';\nimport DatePicker from 'react-datepicker';\nimport TimeRangePicker from './components/TimeRangePicker';\nimport { Box, Heading } from '@chakra-ui/core';\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst startUrlParam = urlParams.get('start');\nconst endUrlParam = urlParams.get('end');\nconst dateUrlParam = urlParams.get('date') && parseISO(urlParams.get('date'));\n\nconst formatDate = date => {\n  return format(date, 'yyyy-MM-dd');\n};\n\nfunction App() {\n  const [searchDate, setSearchDate] = React.useState(\n    dateUrlParam || new Date()\n  );\n  const [[start, end], setTimeRange] = React.useState([\n    startUrlParam || '06:00',\n    endUrlParam || '22:00'\n  ]);\n  const [places, setPlaces] = React.useState([]);\n\n  React.useEffect(() => {\n    async function fetchAvailableHours(date) {\n      setPlaces(await getAllAvailableHours(date));\n    }\n\n    fetchAvailableHours(searchDate);\n  }, [setPlaces, searchDate]);\n\n  React.useEffect(() => {\n    window.history.pushState(\n      '',\n      '',\n      `/vapaat-tennisvuorot/?date=${formatDate(\n        searchDate\n      )}&start=${start}&end=${end}`\n    );\n  }, [searchDate, start, end]);\n\n  const handleTimeRangeChange = React.useCallback(\n    range => setTimeRange(range),\n    []\n  );\n\n  return (\n    <div style={{ maxWidth: '100%', padding: '10px' }}>\n      <Heading mb=\"2rem\">Vapaat tennisvuorot</Heading>\n      <DatePicker\n        selected={searchDate}\n        onChange={date => {\n          setSearchDate(date);\n          setPlaces([]);\n        }}\n        minDate={new Date()}\n        inline\n      />\n      <TimeRangePicker onChange={handleTimeRangeChange} from={start} to={end} />\n      {places.length > 0 ? (\n        places.map(place => (\n          <div key={place.name}>\n            <a href={place.link} target=\"_blank\" rel=\"noopener noreferrer\">\n              <Heading size=\"sm\" my=\"1rem\">\n                {place.name}\n              </Heading>\n            </a>\n            {renderHours(place, start, end)}\n          </div>\n        ))\n      ) : (\n        <div style={{ marginTop: '20px' }}>\n          <h2>Ladataan vapaita vuoroja...</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction renderHours(place, start, end) {\n  const hours = place.availableHours\n    .filter(\n      hour => parseInt(hour) > parseInt(start) && parseInt(hour) < parseInt(end)\n    )\n    .map(hour => (\n      <a href={place.link} key={hour} target=\"_blank\" rel=\"noopener noreferrer\">\n        <span\n          style={{\n            display: 'inline-block',\n            margin: '5px',\n            border: 'solid',\n            borderWidth: '1px',\n            padding: '3px'\n          }}\n        >\n          {hour}\n        </span>\n      </a>\n    ));\n  return hours.length > 0 ? hours : <Box>Ei vapaita vuoroja.</Box>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core';\n\nReactDOM.render(\n  <ThemeProvider>\n    <CSSReset />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}