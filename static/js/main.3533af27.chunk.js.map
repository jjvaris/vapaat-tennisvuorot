{"version":3,"sources":["components/TimeRangePicker.js","utils/api.js","App.js","serviceWorker.js","index.js"],"names":["HOURS","TimeRangePicker","onChange","from","to","React","useState","start","setStart","end","setEnd","useEffect","Flex","align","justify","w","Select","size","value","e","target","iconSize","p","style","textAlignLast","slice","filter","hour","map","key","Box","mx","client","axios","create","timeout","urlParams","URLSearchParams","window","location","search","startUrlParam","get","endUrlParam","dateUrlParam","parseISO","App","data","setData","date","today","Date","resolveSearchDate","searchDate","setSearchDate","setTimeRange","places","setPlaces","then","response","allByDay","availableHours","reduce","acc","cur","day","format","byHallId","i","includes","courtType","thirtyMinutes","hallId","Set","name","halls","find","hall","id","link","sort","a","b","nameA","toUpperCase","nameB","getHours","history","pushState","handleTimeRangeChange","useCallback","range","maxWidth","padding","Alert","mb","Link","ml","href","isExternal","Heading","selected","minDate","inline","length","place","rel","my","error","hours","parseInt","display","margin","border","borderWidth","renderHours","marginTop","Boolean","hostname","match","ReactDOM","render","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3533af27.chunk.js","sourcesContent":["import React from 'react';\nimport { Flex, Select, Box } from '@chakra-ui/core';\n\nconst HOURS = [\n  '06:00',\n  '07:00',\n  '08:00',\n  '09:00',\n  '10:00',\n  '11:00',\n  '12:00',\n  '13:00',\n  '14:00',\n  '15:00',\n  '16:00',\n  '17:00',\n  '18:00',\n  '19:00',\n  '20:00',\n  '21:00',\n  '22:00'\n];\n\nconst TimeRangePicker = ({ onChange, from, to }) => {\n  const [start, setStart] = React.useState(from);\n  const [end, setEnd] = React.useState(to);\n\n  React.useEffect(() => {\n    onChange([start, end]);\n  }, [start, end, onChange]);\n\n  return (\n    <Flex align=\"center\" justify=\"center\" w=\"240px\">\n      <Select\n        size=\"sm\"\n        value={start}\n        onChange={e => setStart(e.target.value)}\n        iconSize=\"0\"\n        w=\"55px\"\n        p=\"0.1rem\"\n        style={{ textAlignLast: 'center' }}\n      >\n        {HOURS.slice(0, -1)\n          .filter(hour => hour < end)\n          .map(hour => (\n            <option value={hour} key={hour}>\n              {hour}\n            </option>\n          ))}\n      </Select>\n      <Box mx=\"5px\">-</Box>\n      <Select\n        size=\"sm\"\n        value={end}\n        onChange={e => setEnd(e.target.value)}\n        iconSize=\"0\"\n        w=\"55px\"\n        p=\"0.1rem\"\n        style={{ textAlignLast: 'center' }}\n      >\n        {HOURS.slice(1)\n          .filter(hour => hour > start)\n          .map(hour => (\n            <option value={hour} key={hour}>\n              {hour}\n            </option>\n          ))}\n      </Select>\n    </Flex>\n  );\n};\n\nexport default TimeRangePicker;\n","import axios from 'axios';\n\nexport const client = axios.create({ timeout: 5000 });\n\nexport const get = (url) =>\n  client.get(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);\n","import 'react-datepicker/dist/react-datepicker.css';\nimport React from 'react';\nimport { format, parseISO } from 'date-fns';\nimport DatePicker from 'react-datepicker';\nimport TimeRangePicker from './components/TimeRangePicker';\nimport { Alert, AlertIcon, Box, Heading, Link } from '@chakra-ui/core';\n\nimport { client } from './utils/api';\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst startUrlParam = urlParams.get('start');\nconst endUrlParam = urlParams.get('end');\nconst dateUrlParam = urlParams.get('date') && parseISO(urlParams.get('date'));\n\nconst formatDate = (date) => {\n  return format(date, 'yyyy-MM-dd');\n};\n\nconst resolveSearchDate = (date) => {\n  const today = new Date();\n  if (!date) {\n    return today;\n  }\n  return date < today ? today : date;\n};\n\nconst getHours = (data, searchDate) => {\n  if (!data) {\n    return [];\n  }\n\n  const byDay = data.availableHours.reduce((acc, cur) => {\n    if (!acc[cur.day]) {\n      acc[cur.day] = [cur];\n      return acc;\n    }\n    acc[cur.day] = [...acc[cur.day], cur];\n    return acc;\n  }, {});\n\n  const allByDay = byDay[format(searchDate, 'yyyy-MM-dd')];\n\n  if (!allByDay) {\n    return [];\n  }\n\n  const byHallId = allByDay\n    .filter(\n      (i) => ['INSIDE', 'INFLATED'].includes(i.courtType) && !i.thirtyMinutes\n    )\n    .reduce((acc, cur) => {\n      if (!acc[cur.hallId]) {\n        acc[cur.hallId] = {\n          name: data.halls.find((hall) => hall.id === cur.hallId).name,\n          availableHours: [cur.hour],\n          link: cur.link,\n        };\n        return acc;\n      }\n      acc[cur.hallId].availableHours = [\n        ...new Set([...acc[cur.hallId].availableHours, cur.hour]),\n      ];\n      return acc;\n    }, {});\n\n  return data.halls\n    .slice()\n    .sort((a, b) => {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    })\n    .map((hall) => ({\n      name: hall.name,\n      availableHours: byHallId[hall.id]?.availableHours ?? [],\n      link: byHallId[hall.id]?.link ?? hall.link,\n    }));\n};\n\nfunction App() {\n  const [data, setData] = React.useState();\n  const [searchDate, setSearchDate] = React.useState(\n    resolveSearchDate(dateUrlParam)\n  );\n  const [[start, end], setTimeRange] = React.useState([\n    startUrlParam || '06:00',\n    endUrlParam || '22:00',\n  ]);\n  const [places, setPlaces] = React.useState([]);\n\n  React.useEffect(() => {\n    client\n      .get('https://pelivuorot.herokuapp.com/api/available-hours')\n      .then((response) => setData(response.data));\n  }, []);\n\n  React.useEffect(() => {\n    setPlaces(getHours(data, searchDate));\n  }, [setPlaces, searchDate, data]);\n\n  React.useEffect(() => {\n    window.history.pushState(\n      '',\n      '',\n      `/vapaat-tennisvuorot/?date=${formatDate(\n        searchDate\n      )}&start=${start}&end=${end}`\n    );\n  }, [searchDate, start, end]);\n\n  const handleTimeRangeChange = React.useCallback(\n    (range) => setTimeRange(range),\n    []\n  );\n\n  return (\n    <div style={{ maxWidth: '100%', padding: '10px' }}>\n      <Alert mb=\"2rem\">\n        <AlertIcon />\n        Vapaat tennisvuorot löytyy nyt osoitteesta{' '}\n        <Link ml=\"10px\" href=\"https://pelivuorot.com\" isExternal>\n          www.pelivuorot.com\n        </Link>\n      </Alert>\n      <Heading mb=\"2rem\">Vapaat tennisvuorot</Heading>\n      <DatePicker\n        selected={searchDate}\n        onChange={(date) => {\n          setSearchDate(date);\n          setPlaces([]);\n        }}\n        minDate={new Date()}\n        inline\n      />\n      <TimeRangePicker onChange={handleTimeRangeChange} from={start} to={end} />\n      {places.length > 0 ? (\n        places.map((place) => (\n          <div key={place.name}>\n            <a href={place.link} target=\"_blank\" rel=\"noopener noreferrer\">\n              <Heading size=\"sm\" my=\"1rem\">\n                {place.name}\n              </Heading>\n            </a>\n\n            {place.error ? (\n              <h2>Virhe vuorojen latauksessa.</h2>\n            ) : (\n              renderHours(place, start, end)\n            )}\n          </div>\n        ))\n      ) : (\n        <div style={{ marginTop: '20px' }}>\n          <h2>\n            {!data\n              ? 'Ladataan vapaita vuoroja...'\n              : 'Valittu päivämäärä ylittää kaksi viikkoa nykyhetkestä, katso vapaat ajat hallien sivuilta'}\n          </h2>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction renderHours(place, start, end) {\n  const hours = place.availableHours\n    .filter(\n      (hour) =>\n        parseInt(hour) >= parseInt(start) && parseInt(hour) <= parseInt(end)\n    )\n    .map((hour) => (\n      <a href={place.link} key={hour} target=\"_blank\" rel=\"noopener noreferrer\">\n        <span\n          style={{\n            display: 'inline-block',\n            margin: '5px',\n            border: 'solid',\n            borderWidth: '1px',\n            padding: '3px',\n          }}\n        >\n          {hour}\n        </span>\n      </a>\n    ));\n  return hours.length > 0 ? hours : <Box>Ei vapaita vuoroja.</Box>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core';\n\nReactDOM.render(\n  <ThemeProvider>\n    <CSSReset />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}