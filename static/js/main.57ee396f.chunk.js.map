{"version":3,"sources":["utils/api.js","hallit/talintenniskeskus.js","hallit/meilahti.js","hallit/taivallahti.js","hallit/esportTapiola.js","hallit/index.js","components/TimeRangePicker.js","App.js","serviceWorker.js","index.js"],"names":["get","url","axios","encodeURIComponent","getAvailableHours","date","a","today","format","subDays","response","html","data","contents","availableHours","$","find","map","_","e","text","name","link","addDays","filter","length","console","log","split","esport1","courts10To14","esport2","courts1To8","getAllAvailableHours","Promise","all","tali","meilahti","taivallahti","esport","HOURS","TimeRangePicker","onChange","from","to","React","useState","start","setStart","end","setEnd","useEffect","Flex","align","justify","w","Select","size","value","target","iconSize","p","style","textAlignLast","slice","hour","key","Box","mx","urlParams","URLSearchParams","window","location","search","startUrlParam","endUrlParam","dateUrlParam","parseISO","App","Date","searchDate","setSearchDate","setTimeRange","places","setPlaces","fetchAvailableHours","history","pushState","handleTimeRangeChange","useCallback","range","maxWidth","padding","Heading","mb","selected","minDate","inline","place","href","rel","my","hours","parseInt","display","margin","border","borderWidth","renderHours","marginTop","Boolean","hostname","match","ReactDOM","render","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57ee396f.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const get = url =>\n  axios.get(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);\n","import { get } from '../utils/api';\nimport $ from 'jquery';\nimport { format, subDays } from 'date-fns';\n\nconst getAvailableHours = async date => {\n  const today = format(subDays(date, 1), 'yyyy-MM-dd');\n  const url = `https://varaukset.talintenniskeskus.fi/booking/booking-calendar?BookingCalForm%5Bp_laji%5D=1&BookingCalForm%5Bp_pvm%5D=${today}&BookingCalForm%5Bp_pvm_interval%5D=1&BookingCalForm%5Bp_pvm_custom%5D=Sunnuntai+08.03.2020`;\n  const response = await get(url);\n  const html = response.data.contents;\n  const availableHours = $(html)\n    .find('a[class=time-link]')\n    .map((_, e) => $(e).text())\n    .get();\n  return { name: 'Talin Tenniskeskus', availableHours, link: url };\n};\n\nexport default getAvailableHours;\n","import { get } from '../utils/api';\nimport $ from 'jquery';\nimport { format, addDays } from 'date-fns';\n\nconst getAvailableHours = async date => {\n  const today = format(addDays(date, 1), 'yyyy-MM-dd');\n  const url = `https://meilahti.slsystems.fi/booking/booking-calendar?BookingCalForm%5Bp_laji%5D=1&BookingCalForm%5Bp_pvm%5D=${today}&BookingCalForm%5Bp_pvm_interval%5D=-1&BookingCalForm%5Bp_pvm_custom%5D=Maanantai+09.03.2020`;\n  const response = await get(url);\n  const html = response.data.contents;\n  const availableHours = $(html)\n    .find('a[class=time-link]')\n    .map((_, e) => $(e).text())\n    .get();\n  return {\n    name: 'Meilahden liikuntakeskus',\n    availableHours,\n    link: url\n  };\n};\n\nexport default getAvailableHours;\n","import { get } from '../utils/api';\nimport $ from 'jquery';\nimport { format, subDays } from 'date-fns';\n\nconst getAvailableHours = async date => {\n  const today = format(date, 'yyyy-MM-dd');\n  const url = `https://varaukset.talintenniskeskus.fi/booking/booking-calendar?BookingCalForm%5Bp_laji%5D=5&BookingCalForm%5Bp_pvm%5D=${today}&BookingCalForm%5Bp_pvm_interval%5D=&BookingCalForm%5Bp_pvm_custom%5D=Sunnuntai+15.03.2020`;\n  const response = await get(url);\n  const html = response.data.contents;\n  const availableHours = $(html)\n    .find('a[class=time-link]')\n    .map((_, e) => $(e).text())\n    .get();\n  return { name: 'Taivallahti', availableHours, link: url };\n};\n\nexport default getAvailableHours;\n","import { get } from '../utils/api';\nimport $ from 'jquery';\nimport { format } from 'date-fns';\n\nconst getAvailableHours = async url => {\n  const response = await get(url);\n  const html = response.data.contents;\n  const availableHours = $(html)\n    .find('tr[class=state_R],tr[class=state_F]')\n    .filter(\n      (_, e) => $(e).find('td[class=\"state_white res_success\"]').length > 0\n    )\n    .map((_, e) => {\n      console.log(e);\n      return $(e)\n        .text()\n        .split(' - ')[0];\n    })\n    .get();\n  return availableHours;\n};\n\nconst esport1 = async date => {\n  const today = format(date, 'dd.MM.yyyy');\n  const courts10To14 = `https://varaus.esportcenter.fi/varaus/index.php?func=mod_rc_v2&pageId=3&cdate=${today}`;\n  const availableHours = await getAvailableHours(courts10To14);\n  return {\n    name: 'Esport Center Tapiola 1-8',\n    availableHours,\n    link: courts10To14\n  };\n};\n\nconst esport2 = async date => {\n  const today = format(date, 'dd.MM.yyyy');\n  const courts1To8 = `https://varaus.esportcenter.fi/varaus/index.php?func=mod_rc_v2&pageId=4&cdate=${today}`;\n  const availableHours = await getAvailableHours(courts1To8);\n  return {\n    name: 'Esport Center Tapiola 10-14',\n    availableHours,\n    link: courts1To8\n  };\n};\n\nexport default { esport1, esport2 };\n","import tali from './talintenniskeskus';\nimport meilahti from './meilahti';\nimport taivallahti from './taivallahti';\nimport esport from './esportTapiola';\n\nconst getAllAvailableHours = async date =>\n  await Promise.all([\n    tali(date),\n    meilahti(date),\n    taivallahti(date),\n    esport.esport1(date),\n    esport.esport2(date)\n  ]);\n\nexport default getAllAvailableHours;\n","import React from 'react';\nimport { Flex, Select, Box } from '@chakra-ui/core';\n\nconst HOURS = [\n  '06:00',\n  '07:00',\n  '08:00',\n  '09:00',\n  '10:00',\n  '11:00',\n  '12:00',\n  '13:00',\n  '14:00',\n  '15:00',\n  '16:00',\n  '17:00',\n  '18:00',\n  '19:00',\n  '20:00',\n  '21:00',\n  '22:00'\n];\n\nconst TimeRangePicker = ({ onChange, from, to }) => {\n  const [start, setStart] = React.useState(from);\n  const [end, setEnd] = React.useState(to);\n\n  React.useEffect(() => {\n    onChange([start, end]);\n  }, [start, end, onChange]);\n\n  return (\n    <Flex align=\"center\" justify=\"center\" w=\"240px\">\n      <Select\n        size=\"sm\"\n        value={start}\n        onChange={e => setStart(e.target.value)}\n        iconSize=\"0\"\n        w=\"55px\"\n        p=\"0.1rem\"\n        style={{ textAlignLast: 'center' }}\n      >\n        {HOURS.slice(0, -1)\n          .filter(hour => hour < end)\n          .map(hour => (\n            <option value={hour} key={hour}>\n              {hour}\n            </option>\n          ))}\n      </Select>\n      <Box mx=\"5px\">-</Box>\n      <Select\n        size=\"sm\"\n        value={end}\n        onChange={e => setEnd(e.target.value)}\n        iconSize=\"0\"\n        w=\"55px\"\n        p=\"0.1rem\"\n        style={{ textAlignLast: 'center' }}\n      >\n        {HOURS.slice(1)\n          .filter(hour => hour > start)\n          .map(hour => (\n            <option value={hour} key={hour}>\n              {hour}\n            </option>\n          ))}\n      </Select>\n    </Flex>\n  );\n};\n\nexport default TimeRangePicker;\n","import 'react-datepicker/dist/react-datepicker.css';\nimport React from 'react';\nimport getAllAvailableHours from './hallit';\nimport { format, parseISO } from 'date-fns';\nimport DatePicker from 'react-datepicker';\nimport TimeRangePicker from './components/TimeRangePicker';\nimport { Box, Heading } from '@chakra-ui/core';\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst startUrlParam = urlParams.get('start');\nconst endUrlParam = urlParams.get('end');\nconst dateUrlParam = urlParams.get('date') && parseISO(urlParams.get('date'));\n\nconst formatDate = date => {\n  return format(date, 'yyyy-MM-dd');\n};\n\nfunction App() {\n  const [searchDate, setSearchDate] = React.useState(\n    dateUrlParam || new Date()\n  );\n  const [[start, end], setTimeRange] = React.useState([\n    startUrlParam || '06:00',\n    endUrlParam || '22:00'\n  ]);\n  const [places, setPlaces] = React.useState([]);\n\n  React.useEffect(() => {\n    async function fetchAvailableHours(date) {\n      setPlaces(await getAllAvailableHours(date));\n    }\n\n    fetchAvailableHours(searchDate);\n  }, [setPlaces, searchDate]);\n\n  React.useEffect(() => {\n    window.history.pushState(\n      '',\n      '',\n      `/vapaat-tennisvuorot/?date=${formatDate(\n        searchDate\n      )}&start=${start}&end=${end}`\n    );\n  }, [searchDate, start, end]);\n\n  const handleTimeRangeChange = React.useCallback(\n    range => setTimeRange(range),\n    []\n  );\n\n  return (\n    <div style={{ maxWidth: '100%', padding: '10px' }}>\n      <Heading mb=\"2rem\">Vapaat tennisvuorot</Heading>\n      <DatePicker\n        selected={searchDate}\n        onChange={date => {\n          setSearchDate(date);\n          setPlaces([]);\n        }}\n        minDate={new Date()}\n        inline\n      />\n      <TimeRangePicker onChange={handleTimeRangeChange} from={start} to={end} />\n      {places.length > 0 ? (\n        places.map(place => (\n          <div key={place.name}>\n            <a href={place.link} target=\"_blank\" rel=\"noopener noreferrer\">\n              <Heading size=\"sm\" my=\"1rem\">\n                {place.name}\n              </Heading>\n            </a>\n            {renderHours(place, start, end)}\n          </div>\n        ))\n      ) : (\n        <div style={{ marginTop: '20px' }}>\n          <h2>Ladataan vapaita vuoroja...</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction renderHours(place, start, end) {\n  const hours = place.availableHours\n    .filter(\n      hour =>\n        parseInt(hour) >= parseInt(start) && parseInt(hour) <= parseInt(end)\n    )\n    .map(hour => (\n      <a href={place.link} key={hour} target=\"_blank\" rel=\"noopener noreferrer\">\n        <span\n          style={{\n            display: 'inline-block',\n            margin: '5px',\n            border: 'solid',\n            borderWidth: '1px',\n            padding: '3px'\n          }}\n        >\n          {hour}\n        </span>\n      </a>\n    ));\n  return hours.length > 0 ? hours : <Box>Ei vapaita vuoroja.</Box>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core';\n\nReactDOM.render(\n  <ThemeProvider>\n    <CSSReset />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}